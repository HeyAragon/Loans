package com.hackhome.loans.greendao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.hackhome.loans.bean.ApplyRecordModel;
import com.hackhome.loans.bean.DownloadRecordModel;
import com.hackhome.loans.bean.ReadRecord;

import com.hackhome.loans.greendao.ApplyRecordModelDao;
import com.hackhome.loans.greendao.DownloadRecordModelDao;
import com.hackhome.loans.greendao.ReadRecordDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig applyRecordModelDaoConfig;
    private final DaoConfig downloadRecordModelDaoConfig;
    private final DaoConfig readRecordDaoConfig;

    private final ApplyRecordModelDao applyRecordModelDao;
    private final DownloadRecordModelDao downloadRecordModelDao;
    private final ReadRecordDao readRecordDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        applyRecordModelDaoConfig = daoConfigMap.get(ApplyRecordModelDao.class).clone();
        applyRecordModelDaoConfig.initIdentityScope(type);

        downloadRecordModelDaoConfig = daoConfigMap.get(DownloadRecordModelDao.class).clone();
        downloadRecordModelDaoConfig.initIdentityScope(type);

        readRecordDaoConfig = daoConfigMap.get(ReadRecordDao.class).clone();
        readRecordDaoConfig.initIdentityScope(type);

        applyRecordModelDao = new ApplyRecordModelDao(applyRecordModelDaoConfig, this);
        downloadRecordModelDao = new DownloadRecordModelDao(downloadRecordModelDaoConfig, this);
        readRecordDao = new ReadRecordDao(readRecordDaoConfig, this);

        registerDao(ApplyRecordModel.class, applyRecordModelDao);
        registerDao(DownloadRecordModel.class, downloadRecordModelDao);
        registerDao(ReadRecord.class, readRecordDao);
    }
    
    public void clear() {
        applyRecordModelDaoConfig.clearIdentityScope();
        downloadRecordModelDaoConfig.clearIdentityScope();
        readRecordDaoConfig.clearIdentityScope();
    }

    public ApplyRecordModelDao getApplyRecordModelDao() {
        return applyRecordModelDao;
    }

    public DownloadRecordModelDao getDownloadRecordModelDao() {
        return downloadRecordModelDao;
    }

    public ReadRecordDao getReadRecordDao() {
        return readRecordDao;
    }

}
