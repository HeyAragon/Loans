package com.hackhome.loans.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hackhome.loans.bean.ReadRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "READ_RECORD".
*/
public class ReadRecordDao extends AbstractDao<ReadRecord, Long> {

    public static final String TABLENAME = "READ_RECORD";

    /**
     * Properties of entity ReadRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property PackageName = new Property(1, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property Advertiser = new Property(2, String.class, "advertiser", false, "ADVERTISER");
        public final static Property ProductName = new Property(3, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property SortNumber = new Property(4, String.class, "sortNumber", false, "SORT_NUMBER");
        public final static Property StartLoanMoney = new Property(5, String.class, "startLoanMoney", false, "START_LOAN_MONEY");
        public final static Property EndLoanMoney = new Property(6, String.class, "endLoanMoney", false, "END_LOAN_MONEY");
        public final static Property InterestRateDay = new Property(7, String.class, "interestRateDay", false, "INTEREST_RATE_DAY");
        public final static Property SuccessRate = new Property(8, String.class, "successRate", false, "SUCCESS_RATE");
        public final static Property SecuredLoan = new Property(9, String.class, "securedLoan", false, "SECURED_LOAN");
        public final static Property ProductCharacteristic = new Property(10, String.class, "productCharacteristic", false, "PRODUCT_CHARACTERISTIC");
        public final static Property ProductAndroidUrl = new Property(11, String.class, "productAndroidUrl", false, "PRODUCT_ANDROID_URL");
        public final static Property ProductIosUrl = new Property(12, String.class, "productIosUrl", false, "PRODUCT_IOS_URL");
        public final static Property ProductH5Url = new Property(13, String.class, "productH5Url", false, "PRODUCT_H5_URL");
        public final static Property ProductImg = new Property(14, String.class, "productImg", false, "PRODUCT_IMG");
        public final static Property ProductIntroduce = new Property(15, String.class, "productIntroduce", false, "PRODUCT_INTRODUCE");
        public final static Property Created = new Property(16, String.class, "created", false, "CREATED");
        public final static Property Updated = new Property(17, String.class, "updated", false, "UPDATED");
        public final static Property EndLoanTime = new Property(18, String.class, "endLoanTime", false, "END_LOAN_TIME");
        public final static Property StartLoanTime = new Property(19, String.class, "startLoanTime", false, "START_LOAN_TIME");
    }


    public ReadRecordDao(DaoConfig config) {
        super(config);
    }
    
    public ReadRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"READ_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"PACKAGE_NAME\" TEXT," + // 1: packageName
                "\"ADVERTISER\" TEXT," + // 2: advertiser
                "\"PRODUCT_NAME\" TEXT," + // 3: productName
                "\"SORT_NUMBER\" TEXT," + // 4: sortNumber
                "\"START_LOAN_MONEY\" TEXT," + // 5: startLoanMoney
                "\"END_LOAN_MONEY\" TEXT," + // 6: endLoanMoney
                "\"INTEREST_RATE_DAY\" TEXT," + // 7: interestRateDay
                "\"SUCCESS_RATE\" TEXT," + // 8: successRate
                "\"SECURED_LOAN\" TEXT," + // 9: securedLoan
                "\"PRODUCT_CHARACTERISTIC\" TEXT," + // 10: productCharacteristic
                "\"PRODUCT_ANDROID_URL\" TEXT," + // 11: productAndroidUrl
                "\"PRODUCT_IOS_URL\" TEXT," + // 12: productIosUrl
                "\"PRODUCT_H5_URL\" TEXT," + // 13: productH5Url
                "\"PRODUCT_IMG\" TEXT," + // 14: productImg
                "\"PRODUCT_INTRODUCE\" TEXT," + // 15: productIntroduce
                "\"CREATED\" TEXT," + // 16: created
                "\"UPDATED\" TEXT," + // 17: updated
                "\"END_LOAN_TIME\" TEXT," + // 18: endLoanTime
                "\"START_LOAN_TIME\" TEXT);"); // 19: startLoanTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"READ_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReadRecord entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
 
        String advertiser = entity.getAdvertiser();
        if (advertiser != null) {
            stmt.bindString(3, advertiser);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(4, productName);
        }
 
        String sortNumber = entity.getSortNumber();
        if (sortNumber != null) {
            stmt.bindString(5, sortNumber);
        }
 
        String startLoanMoney = entity.getStartLoanMoney();
        if (startLoanMoney != null) {
            stmt.bindString(6, startLoanMoney);
        }
 
        String endLoanMoney = entity.getEndLoanMoney();
        if (endLoanMoney != null) {
            stmt.bindString(7, endLoanMoney);
        }
 
        String interestRateDay = entity.getInterestRateDay();
        if (interestRateDay != null) {
            stmt.bindString(8, interestRateDay);
        }
 
        String successRate = entity.getSuccessRate();
        if (successRate != null) {
            stmt.bindString(9, successRate);
        }
 
        String securedLoan = entity.getSecuredLoan();
        if (securedLoan != null) {
            stmt.bindString(10, securedLoan);
        }
 
        String productCharacteristic = entity.getProductCharacteristic();
        if (productCharacteristic != null) {
            stmt.bindString(11, productCharacteristic);
        }
 
        String productAndroidUrl = entity.getProductAndroidUrl();
        if (productAndroidUrl != null) {
            stmt.bindString(12, productAndroidUrl);
        }
 
        String productIosUrl = entity.getProductIosUrl();
        if (productIosUrl != null) {
            stmt.bindString(13, productIosUrl);
        }
 
        String productH5Url = entity.getProductH5Url();
        if (productH5Url != null) {
            stmt.bindString(14, productH5Url);
        }
 
        String productImg = entity.getProductImg();
        if (productImg != null) {
            stmt.bindString(15, productImg);
        }
 
        String productIntroduce = entity.getProductIntroduce();
        if (productIntroduce != null) {
            stmt.bindString(16, productIntroduce);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(17, created);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(18, updated);
        }
 
        String endLoanTime = entity.getEndLoanTime();
        if (endLoanTime != null) {
            stmt.bindString(19, endLoanTime);
        }
 
        String startLoanTime = entity.getStartLoanTime();
        if (startLoanTime != null) {
            stmt.bindString(20, startLoanTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReadRecord entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(2, packageName);
        }
 
        String advertiser = entity.getAdvertiser();
        if (advertiser != null) {
            stmt.bindString(3, advertiser);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(4, productName);
        }
 
        String sortNumber = entity.getSortNumber();
        if (sortNumber != null) {
            stmt.bindString(5, sortNumber);
        }
 
        String startLoanMoney = entity.getStartLoanMoney();
        if (startLoanMoney != null) {
            stmt.bindString(6, startLoanMoney);
        }
 
        String endLoanMoney = entity.getEndLoanMoney();
        if (endLoanMoney != null) {
            stmt.bindString(7, endLoanMoney);
        }
 
        String interestRateDay = entity.getInterestRateDay();
        if (interestRateDay != null) {
            stmt.bindString(8, interestRateDay);
        }
 
        String successRate = entity.getSuccessRate();
        if (successRate != null) {
            stmt.bindString(9, successRate);
        }
 
        String securedLoan = entity.getSecuredLoan();
        if (securedLoan != null) {
            stmt.bindString(10, securedLoan);
        }
 
        String productCharacteristic = entity.getProductCharacteristic();
        if (productCharacteristic != null) {
            stmt.bindString(11, productCharacteristic);
        }
 
        String productAndroidUrl = entity.getProductAndroidUrl();
        if (productAndroidUrl != null) {
            stmt.bindString(12, productAndroidUrl);
        }
 
        String productIosUrl = entity.getProductIosUrl();
        if (productIosUrl != null) {
            stmt.bindString(13, productIosUrl);
        }
 
        String productH5Url = entity.getProductH5Url();
        if (productH5Url != null) {
            stmt.bindString(14, productH5Url);
        }
 
        String productImg = entity.getProductImg();
        if (productImg != null) {
            stmt.bindString(15, productImg);
        }
 
        String productIntroduce = entity.getProductIntroduce();
        if (productIntroduce != null) {
            stmt.bindString(16, productIntroduce);
        }
 
        String created = entity.getCreated();
        if (created != null) {
            stmt.bindString(17, created);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(18, updated);
        }
 
        String endLoanTime = entity.getEndLoanTime();
        if (endLoanTime != null) {
            stmt.bindString(19, endLoanTime);
        }
 
        String startLoanTime = entity.getStartLoanTime();
        if (startLoanTime != null) {
            stmt.bindString(20, startLoanTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReadRecord readEntity(Cursor cursor, int offset) {
        ReadRecord entity = new ReadRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // packageName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // advertiser
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // productName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sortNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // startLoanMoney
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // endLoanMoney
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // interestRateDay
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // successRate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // securedLoan
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // productCharacteristic
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // productAndroidUrl
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // productIosUrl
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // productH5Url
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // productImg
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // productIntroduce
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // created
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // updated
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // endLoanTime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // startLoanTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReadRecord entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackageName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAdvertiser(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSortNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStartLoanMoney(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEndLoanMoney(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInterestRateDay(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSuccessRate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSecuredLoan(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProductCharacteristic(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setProductAndroidUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProductIosUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setProductH5Url(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setProductImg(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setProductIntroduce(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCreated(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUpdated(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setEndLoanTime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setStartLoanTime(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReadRecord entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReadRecord entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReadRecord entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
