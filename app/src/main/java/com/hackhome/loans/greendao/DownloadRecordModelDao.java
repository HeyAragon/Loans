package com.hackhome.loans.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hackhome.loans.bean.DownloadRecordModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_RECORD_MODEL".
*/
public class DownloadRecordModelDao extends AbstractDao<DownloadRecordModel, Long> {

    public static final String TABLENAME = "DOWNLOAD_RECORD_MODEL";

    /**
     * Properties of entity DownloadRecordModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property State = new Property(1, int.class, "state", false, "STATE");
        public final static Property Total = new Property(2, long.class, "total", false, "TOTAL");
        public final static Property TaskId = new Property(3, int.class, "taskId", false, "TASK_ID");
        public final static Property BtnPos = new Property(4, int.class, "btnPos", false, "BTN_POS");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property Path = new Property(7, String.class, "path", false, "PATH");
        public final static Property PkgName = new Property(8, String.class, "pkgName", false, "PKG_NAME");
        public final static Property IconUrl = new Property(9, String.class, "iconUrl", false, "ICON_URL");
        public final static Property SubContent = new Property(10, String.class, "subContent", false, "SUB_CONTENT");
        public final static Property IsInstalled = new Property(11, boolean.class, "isInstalled", false, "IS_INSTALLED");
    }


    public DownloadRecordModelDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadRecordModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_RECORD_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STATE\" INTEGER NOT NULL ," + // 1: state
                "\"TOTAL\" INTEGER NOT NULL ," + // 2: total
                "\"TASK_ID\" INTEGER NOT NULL ," + // 3: taskId
                "\"BTN_POS\" INTEGER NOT NULL ," + // 4: btnPos
                "\"NAME\" TEXT," + // 5: name
                "\"URL\" TEXT," + // 6: url
                "\"PATH\" TEXT," + // 7: path
                "\"PKG_NAME\" TEXT," + // 8: pkgName
                "\"ICON_URL\" TEXT," + // 9: iconUrl
                "\"SUB_CONTENT\" TEXT," + // 10: subContent
                "\"IS_INSTALLED\" INTEGER NOT NULL );"); // 11: isInstalled
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_RECORD_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadRecordModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getState());
        stmt.bindLong(3, entity.getTotal());
        stmt.bindLong(4, entity.getTaskId());
        stmt.bindLong(5, entity.getBtnPos());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(8, path);
        }
 
        String pkgName = entity.getPkgName();
        if (pkgName != null) {
            stmt.bindString(9, pkgName);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(10, iconUrl);
        }
 
        String subContent = entity.getSubContent();
        if (subContent != null) {
            stmt.bindString(11, subContent);
        }
        stmt.bindLong(12, entity.getIsInstalled() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadRecordModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getState());
        stmt.bindLong(3, entity.getTotal());
        stmt.bindLong(4, entity.getTaskId());
        stmt.bindLong(5, entity.getBtnPos());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(8, path);
        }
 
        String pkgName = entity.getPkgName();
        if (pkgName != null) {
            stmt.bindString(9, pkgName);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(10, iconUrl);
        }
 
        String subContent = entity.getSubContent();
        if (subContent != null) {
            stmt.bindString(11, subContent);
        }
        stmt.bindLong(12, entity.getIsInstalled() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadRecordModel readEntity(Cursor cursor, int offset) {
        DownloadRecordModel entity = new DownloadRecordModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // state
            cursor.getLong(offset + 2), // total
            cursor.getInt(offset + 3), // taskId
            cursor.getInt(offset + 4), // btnPos
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // path
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pkgName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // iconUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // subContent
            cursor.getShort(offset + 11) != 0 // isInstalled
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadRecordModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setState(cursor.getInt(offset + 1));
        entity.setTotal(cursor.getLong(offset + 2));
        entity.setTaskId(cursor.getInt(offset + 3));
        entity.setBtnPos(cursor.getInt(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPkgName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIconUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSubContent(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsInstalled(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadRecordModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadRecordModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadRecordModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
